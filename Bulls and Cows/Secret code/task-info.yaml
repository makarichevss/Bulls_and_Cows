type: edu
files:
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/bullscows/wqer/erter.java
  visible: true
  learner_created: true
- name: src/bullscows/stage2/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("The secret code is prepared: ****.");
            System.out.println();
            System.out.println("Turn 1. Answer:");
            System.out.println("1234");
            System.out.println("Grade: None.");
            System.out.println();
            System.out.println("Turn 2. Answer:");
            System.out.println("9876");
            System.out.println("Grade: 4 bulls.");
            System.out.println("Congrats! The secret code is 9876.");
        }
    }
  learner_created: false
- name: src/bullscows/stage2/Grade.java
  visible: true
  text: "package bullscows;\n\nclass Grade {\n\tint bulls;\n\tint cows;\n\n\tGrade(int\
    \ bulls, int cows) {\n\t\tthis.bulls = bulls;\n\t\tthis.cows = cows;\n\t}\n}\n"
  learner_created: true
- name: src/bullscows/stage2/Game.java
  visible: true
  text: "package bullscows;\n\nimport java.util.Scanner;\n\nclass Game {\n\tString\
    \ secretCode = \"9305\";\n\n\tprivate static String getGuess() {\n\t\tScanner\
    \ scanner = new Scanner(System.in);\n\t\treturn scanner.next();\n\t}\n\n\tprotected\
    \ Grade getGrade(String guess) {\n\t\tint bull = 0;\n\t\tint cow = 0;\n\n\t\t\
    for (int i = 0; i < guess.length(); i++) {\n\t\t\tif (guess.charAt(i) == this.secretCode.charAt(i))\
    \ {\n\t\t\t\tbull++;\n\t\t\t} else if (this.secretCode.indexOf(guess.charAt(i))\
    \ != -1) {\n\t\t\t\tcow++;\n\t\t\t}\n\t\t}\n\t\treturn new Grade(bull, cow);\n\
    \t}\n\n\tprivate void getGrade(Grade grade) {\n\t\tString gradeCode;\n\n\t\tif\
    \ (grade.bulls != 0 && grade.cows != 0) {\n\t\t\tgradeCode = String.format(\"\
    %d bull(s) and %d cow(s)\", grade.bulls, grade.cows);\n\t\t} else if (grade.bulls\
    \ != 0) {\n\t\t\tgradeCode = String.format(\"%d bull(s)\", grade.bulls);\n\t\t\
    } else if (grade.cows != 0) {\n\t\t\tgradeCode = String.format(\"%d cow(s)\",\
    \ grade.cows);\n\t\t} else {\n\t\t\tgradeCode = \"None\";\n\t\t}\n\t\tSystem.out.printf(\"\
    Grade: %s. The secret code is %s.\", gradeCode, this.secretCode);\n\t}\n\n\tprotected\
    \ void run() {\n\t\tString guess = getGuess();\n\t\tGrade grade = getGrade(guess);\n\
    \t\tgetGrade(grade);\n\t}\n}\n\n\n\n"
  learner_created: true
- name: src/bullscows/stage3/stage3.java
  visible: true
  learner_created: true
- name: src/bullscows/pack/new1.java
  visible: true
  learner_created: true
- name: src/bullscows/Main.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/53/stages/289/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 22 Mar 2021 21:00:38 UTC
record: 3
